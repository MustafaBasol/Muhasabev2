import React, { useState, useEffect } from 'react';
import { adminApi } from '../api/admin';
import { Eye, EyeOff, Edit, Trash2, Plus, ChevronDown, ChevronUp, Filter, X } from 'lucide-react';

interface User {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  role: string;
  isActive: boolean;
  lastLoginAt: string;
  createdAt: string;
  tenant: {
    id: string;
    name: string;
    slug: string;
    companyName: string;
  };
}

interface Tenant {
  id: string;
  name: string;
  slug: string;
  companyName: string;
  subscriptionPlan: string;
  status: string;
  stats: {
    customers: number;
    suppliers: number;
    products: number;
    invoices: number;
    expenses: number;
    users: number;
  };
}

interface UserData {
  tenant: Tenant;
  data: {
    customers: any[];
    suppliers: any[];
    products: any[];
    invoices: any[];
    expenses: any[];
  };
  stats: {
    customers: number;
    suppliers: number;
    products: number;
    invoices: number;
    expenses: number;
    users: number;
  };
}

const AdminPage: React.FC = () => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [adminToken, setAdminToken] = useState<string>('');
  const [loginForm, setLoginForm] = useState({ username: '', password: '' });
  const [users, setUsers] = useState<User[]>([]);
  const [tenants, setTenants] = useState<Tenant[]>([]);
  const [selectedUserData, setSelectedUserData] = useState<UserData | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string>('');
  const [activeTab, setActiveTab] = useState<'users' | 'tenants'>('users');

  useEffect(() => {
    const token = localStorage.getItem('admin-token');
    if (token === 'admin-access-granted') {
      setIsAuthenticated(true);
      setAdminToken(token);
      loadUsers();
      loadTenants();
    }
  }, []);

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const response = await adminApi.login(loginForm.username, loginForm.password);
      if (response.success) {
        setIsAuthenticated(true);
        setAdminToken(response.adminToken);
        localStorage.setItem('admin-token', response.adminToken);
        loadUsers();
        loadTenants();
      }
    } catch (err: any) {
      setError(err.response?.data?.message || 'Giriş başarısız');
    } finally {
      setLoading(false);
    }
  };

  const loadUsers = async () => {
    try {
      const usersData = await adminApi.getUsers();
      setUsers(usersData);
    } catch (err) {
      setError('Kullanıcılar yüklenemedi');
    }
  };

  const loadTenants = async () => {
    try {
      const tenantsData = await adminApi.getTenants();
      setTenants(tenantsData);
    } catch (err) {
      setError('Tenant\'lar yüklenemedi');
    }
  };

  const handleUserClick = async (userId: string) => {
    setLoading(true);
    try {
      const userData = await adminApi.getUserData(userId);
      setSelectedUserData(userData);
    } catch (err) {
      setError('Kullanıcı verileri yüklenemedi');
    } finally {
      setLoading(false);
    }
  };

  const handleLogout = () => {
    setIsAuthenticated(false);
    setAdminToken('');
    setSelectedUserData(null);
    localStorage.removeItem('admin-token');
  };

  const formatDate = (date: string) => {
    return new Date(date).toLocaleString('tr-TR');
  };

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center">
        <div className="bg-white p-8 rounded-lg shadow-md w-96">
          <h1 className="text-2xl font-bold text-center mb-6 text-red-600">🔐 Admin Paneli</h1>
          
          <form onSubmit={handleLogin} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700">Kullanıcı Adı</label>
              <input
                type="text"
                value={loginForm.username}
                onChange={(e) => setLoginForm({ ...loginForm, username: e.target.value })}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-red-500 focus:border-red-500"
                placeholder="admin"
                required
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700">Şifre</label>
              <input
                type="password"
                value={loginForm.password}
                onChange={(e) => setLoginForm({ ...loginForm, password: e.target.value })}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-red-500 focus:border-red-500"
                placeholder="admin123"
                required
              />
            </div>

            {error && (
              <div className="text-red-600 text-sm text-center">{error}</div>
            )}

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-red-600 text-white py-2 px-4 rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 disabled:opacity-50"
            >
              {loading ? 'Giriş yapılıyor...' : 'Giriş Yap'}
            </button>
          </form>

          <div className="mt-4 text-sm text-gray-600 text-center">
            <p>Demo giriş bilgileri:</p>
            <p><strong>Kullanıcı:</strong> admin</p>
            <p><strong>Şifre:</strong> admin123</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Header */}
      <div className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <h1 className="text-2xl font-bold text-red-600">🔐 Admin Paneli</h1>
            <button
              onClick={handleLogout}
              className="bg-red-600 text-white px-4 py-2 rounded-md hover:bg-red-700"
            >
              Çıkış Yap
            </button>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Tab Navigation */}
        <div className="flex space-x-4 mb-6">
          <button
            onClick={() => setActiveTab('users')}
            className={`px-4 py-2 rounded-md font-medium ${
              activeTab === 'users'
                ? 'bg-red-600 text-white'
                : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'
            }`}
          >
            👥 Kullanıcılar ({users.length})
          </button>
          <button
            onClick={() => setActiveTab('tenants')}
            className={`px-4 py-2 rounded-md font-medium ${
              activeTab === 'tenants'
                ? 'bg-red-600 text-white'
                : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'
            }`}
          >
            🏢 Tenant'lar ({tenants.length})
          </button>
        </div>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Left Panel - Users/Tenants List */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-lg font-semibold mb-4">
                {activeTab === 'users' ? '👥 Kullanıcılar' : '🏢 Tenant\'lar'}
              </h2>

              {activeTab === 'users' && (
                <div className="space-y-3">
                  {users.map((user) => (
                    <div
                      key={user.id}
                      onClick={() => handleUserClick(user.id)}
                      className="p-3 border rounded-lg cursor-pointer hover:bg-gray-50 transition-colors"
                    >
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-medium text-gray-900">
                            {user.firstName} {user.lastName}
                          </p>
                          <p className="text-sm text-gray-600">{user.email}</p>
                          <p className="text-xs text-gray-500">{user.tenant.name}</p>
                        </div>
                        <div className="text-right">
                          <span className={`inline-flex px-2 py-1 text-xs rounded-full ${
                            user.isActive 
                              ? 'bg-green-100 text-green-800' 
                              : 'bg-red-100 text-red-800'
                          }`}>
                            {user.isActive ? 'Aktif' : 'Pasif'}
                          </span>
                          <p className="text-xs text-gray-500 mt-1">{user.role}</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}

              {activeTab === 'tenants' && (
                <div className="space-y-3">
                  {tenants.map((tenant) => (
                    <div key={tenant.id} className="p-3 border rounded-lg">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-medium text-gray-900">{tenant.name}</p>
                          <p className="text-sm text-gray-600">{tenant.companyName}</p>
                          <p className="text-xs text-gray-500">@{tenant.slug}</p>
                        </div>
                        <div className="text-right">
                          <span className={`inline-flex px-2 py-1 text-xs rounded-full ${
                            tenant.status === 'active' 
                              ? 'bg-green-100 text-green-800' 
                              : 'bg-red-100 text-red-800'
                          }`}>
                            {tenant.status}
                          </span>
                          <p className="text-xs text-gray-500 mt-1">{tenant.subscriptionPlan}</p>
                        </div>
                      </div>
                      
                      {/* Stats */}
                      <div className="mt-3 grid grid-cols-3 gap-2 text-xs text-gray-600">
                        <div className="text-center">
                          <div className="font-medium">{tenant.stats.users}</div>
                          <div>Kullanıcı</div>
                        </div>
                        <div className="text-center">
                          <div className="font-medium">{tenant.stats.customers}</div>
                          <div>Müşteri</div>
                        </div>
                        <div className="text-center">
                          <div className="font-medium">{tenant.stats.invoices}</div>
                          <div>Fatura</div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>

          {/* Right Panel - User Data Details */}
          <div className="lg:col-span-2">
            {selectedUserData ? (
              <div className="space-y-6">
                {/* Tenant Info */}
                <div className="bg-white rounded-lg shadow p-6">
                  <h3 className="text-lg font-semibold mb-4">🏢 Tenant Bilgileri</h3>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <p className="text-sm text-gray-600">Şirket Adı</p>
                      <p className="font-medium">{selectedUserData.tenant.companyName}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-600">Slug</p>
                      <p className="font-medium">@{selectedUserData.tenant.slug}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-600">Abonelik</p>
                      <p className="font-medium">{selectedUserData.tenant.subscriptionPlan}</p>
                    </div>
                    <div>
                      <p className="text-sm text-gray-600">Durum</p>
                      <span className={`inline-flex px-2 py-1 text-xs rounded-full ${
                        selectedUserData.tenant.status === 'active' 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-red-100 text-red-800'
                      }`}>
                        {selectedUserData.tenant.status}
                      </span>
                    </div>
                  </div>
                </div>

                {/* Stats */}
                <div className="bg-white rounded-lg shadow p-6">
                  <h3 className="text-lg font-semibold mb-4">📊 İstatistikler</h3>
                  <div className="grid grid-cols-3 md:grid-cols-6 gap-4">
                    <div className="text-center">
                      <div className="text-2xl font-bold text-blue-600">{selectedUserData.stats.users}</div>
                      <div className="text-sm text-gray-600">Kullanıcı</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-green-600">{selectedUserData.stats.customers}</div>
                      <div className="text-sm text-gray-600">Müşteri</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-purple-600">{selectedUserData.stats.suppliers}</div>
                      <div className="text-sm text-gray-600">Tedarikçi</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-yellow-600">{selectedUserData.stats.products}</div>
                      <div className="text-sm text-gray-600">Ürün</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-red-600">{selectedUserData.stats.invoices}</div>
                      <div className="text-sm text-gray-600">Fatura</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-orange-600">{selectedUserData.stats.expenses}</div>
                      <div className="text-sm text-gray-600">Gider</div>
                    </div>
                  </div>
                </div>

                {/* Data Tables */}
                <div className="bg-white rounded-lg shadow p-6">
                  <h3 className="text-lg font-semibold mb-4">📋 Veriler</h3>
                  
                  {/* Customers */}
                  {selectedUserData.data.customers.length > 0 && (
                    <div className="mb-6">
                      <h4 className="font-medium text-gray-900 mb-2">👥 Müşteriler ({selectedUserData.data.customers.length})</h4>
                      <div className="overflow-x-auto">
                        <table className="min-w-full text-sm">
                          <thead>
                            <tr className="border-b">
                              <th className="text-left py-2">İsim</th>
                              <th className="text-left py-2">Email</th>
                              <th className="text-left py-2">Şirket</th>
                              <th className="text-right py-2">Bakiye</th>
                            </tr>
                          </thead>
                          <tbody>
                            {selectedUserData.data.customers.slice(0, 5).map((customer: any) => (
                              <tr key={customer.id} className="border-b">
                                <td className="py-2">{customer.name}</td>
                                <td className="py-2">{customer.email}</td>
                                <td className="py-2">{customer.company}</td>
                                <td className="py-2 text-right">₺{parseFloat(customer.balance).toLocaleString('tr-TR')}</td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    </div>
                  )}

                  {/* Invoices */}
                  {selectedUserData.data.invoices.length > 0 && (
                    <div className="mb-6">
                      <h4 className="font-medium text-gray-900 mb-2">📄 Faturalar ({selectedUserData.data.invoices.length})</h4>
                      <div className="overflow-x-auto">
                        <table className="min-w-full text-sm">
                          <thead>
                            <tr className="border-b">
                              <th className="text-left py-2">Fatura No</th>
                              <th className="text-left py-2">Müşteri</th>
                              <th className="text-left py-2">Tarih</th>
                              <th className="text-right py-2">Tutar</th>
                              <th className="text-center py-2">Durum</th>
                            </tr>
                          </thead>
                          <tbody>
                            {selectedUserData.data.invoices.slice(0, 5).map((invoice: any) => (
                              <tr key={invoice.id} className="border-b">
                                <td className="py-2">{invoice.invoiceNumber}</td>
                                <td className="py-2">{invoice.customer?.name || 'N/A'}</td>
                                <td className="py-2">{new Date(invoice.issueDate).toLocaleDateString('tr-TR')}</td>
                                <td className="py-2 text-right">₺{parseFloat(invoice.total).toLocaleString('tr-TR')}</td>
                                <td className="py-2 text-center">
                                  <span className={`px-2 py-1 text-xs rounded-full ${
                                    invoice.status === 'paid' ? 'bg-green-100 text-green-800' :
                                    invoice.status === 'sent' ? 'bg-blue-100 text-blue-800' :
                                    invoice.status === 'overdue' ? 'bg-red-100 text-red-800' :
                                    'bg-gray-100 text-gray-800'
                                  }`}>
                                    {invoice.status}
                                  </span>
                                </td>
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            ) : (
              <div className="bg-white rounded-lg shadow p-6 text-center text-gray-500">
                <p>👈 Detayları görüntülemek için sol panelden bir kullanıcı seçin</p>
              </div>
            )}
          </div>
        </div>
      </div>

      {loading && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-4 rounded-lg">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-red-600 mx-auto"></div>
            <p className="mt-2 text-gray-600">Yükleniyor...</p>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminPage;